/**
 * @file stateJuego.h
 *
 * @author José Tomás Tocino García
 * @date 2010
 *
 * Archivo para la clase de juego principal
 *
 * Copyright (C) 2010 José Tomás Tocino García <theom3ga@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */


#ifndef _STATEGAME_H_
#define _STATEGAME_H_

#include <utility>
#include <memory>
#include <set>
using namespace std;

#include "image.h"
#include "font.h"
#include "sound.h"
#include "music.h"

#include "state.h"
#include "coord.h"
#include "board.h"
#include "floatingScore.h"
#include "baseButton.h"
#include "scoreTable.h"
#include "particleSystem.h"
#include "GameIndicators.h"

class Game;

/**
 * @class StateGame
 *
 * @brief This is the main state of the game.
 *
 * Here is where the game actually takes place.
 *
 * @author José Tomás Tocino García <theom3ga@gmail.com>
 *
 */


class StateGame : public State{
public:

    /// Creates a new StateGame, initializing the loading screen
    StateGame(Game * p);
    ~StateGame();

    void update();
    void draw();

    void buttonDown(SDL_Keycode button);

    void mouseButtonDown(Uint8 button);
    void mouseButtonUp(Uint8 button);

private:

    /// Loads the resources and intializes some variables
    void init();

    void initSounds();
    void initImages();
    void initParameters();

    /// Resets the game
    void resetGame();

    /// Resets the time
    void resetTime();

    /// Plays the sound for the match
    void playMatchSound();

    /// Creates a small label that indicates the points generated by a match
    void createFloatingScores();

    /// Tests if the mouse is over a gem
    bool overGem(int mx, int my);

    /// Returns the coords of the gem the mouse is over
    coord getCoord(int mx, int my);

    bool checkClickedSquare(int mx, int my);

    /// Shows a hint for a possible match
    void showHint();

    void placeGemsOutScreen();



    friend class GameIndicators;

    /// Different states of the game
    enum tState
    {
        eInitial,
        eFirstFlip,
        eInicialGemas,
        eEspera,
        eGemaMarcada,
        eGemasCambiando,
        eGemasDesapareciendo,
        eGemasNuevasCayendo,
        eDesapareceBoard,
        eTimeFinished,
        eShowingScoreTable
    };

    /// Current state
    tState mState;

    /// Game left side of UI
    GameIndicators mGameIndicators;

    /// Loading screen image
    GoSDL::Image mImgLoadingBanner;

    // Background image
    GoSDL::Image mImgBoard;

    /// Image for the gem selector
    GoSDL::Image mImgSelector;

    /// Starting time
    double mTimeStart;

    /// Current score
    int mScore;

    /// Score in previous iteration to avoid re-rendering
    int mLastScore;

    /// @{
    /// @name Images for the gems
    GoSDL::Image mImgWhite;
    GoSDL::Image mImgRed;
    GoSDL::Image mImgPurple;
    GoSDL::Image mImgOrange;
    GoSDL::Image mImgGreen;
    GoSDL::Image mImgYellow;
    GoSDL::Image mImgBlue;
    /// @}

    /// Animation current step
    int mAnimationCurrentStep;

    /// Total animation steps
    int mAnimationTotalSteps;

    /// Total initial animation steps
    int mAnimationInitialSteps;

    /// Steps for the hint animation
    int mHintAnimationTotalSteps;

    /// Hint flag
    int mShowingHint;

    /// Current score multiplier
    int mMultiplier;

    /// Coordinates for the hint
    coord mHintLocation;

    /// Coordinates for the selected square (if any)
    coord mSelectedSquareFirst;

    /// Coordinates for the second selected square
    coord mSelectedSquareSecond;

    /// Flag that indicates whether the user is clicking
    bool mMousePressed;

    /// The game board
    Board mBoard;

    /// Container for the grouped squares
    MultipleMatch mGroupedSquares;

    /// Group of floating scores. There may be some at the same time.
    vector<FloatingScore> mFloatingScores;

    /// Group of particle systems
    vector<ParticleSystem> mParticleSet;

    /// @{
    /// @name Sounds of the game
    GoSDL::Sound sfxMatch1, sfxMatch2, sfxMatch3;
    GoSDL::Sound sfxSelect;
    GoSDL::Sound sfxFall;
    /// @}


    /// Reference to the score table
    std::shared_ptr<ScoreTable> scoreTable;
    //*/
};

#endif /* _STATEGAME_H_ */
